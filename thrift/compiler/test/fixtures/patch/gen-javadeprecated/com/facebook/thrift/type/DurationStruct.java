/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.thrift.type;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

/**
 * A fixed-length span of time, represented as a signed count of seconds and
 * nanoseconds (nanos).
 * 
 * Considered 'normal', when `nanos` is in the range 0 to 999'999'999
 * inclusive, or `seconds` is 0 and `nanos` is in the range -999'999'999 to
 * 999'999'999 inclusive.
 */
@SuppressWarnings({ "unused", "serial" })
public class DurationStruct implements TBase, java.io.Serializable, Cloneable, Comparable<DurationStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("DurationStruct");
  private static final TField SECONDS_FIELD_DESC = new TField("seconds", TType.I64, (short)1);
  private static final TField NANOS_FIELD_DESC = new TField("nanos", TType.I32, (short)2);

  /**
   * The count of seconds.
   */
  public long seconds;
  /**
   * The count of nanoseconds.
   */
  public int nanos;
  public static final int SECONDS = 1;
  public static final int NANOS = 2;

  // isset id assignments
  private static final int __SECONDS_ISSET_ID = 0;
  private static final int __NANOS_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SECONDS, new FieldMetaData("seconds", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(NANOS, new FieldMetaData("nanos", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(DurationStruct.class, metaDataMap);
  }

  public DurationStruct() {
    this.nanos = 0;

  }

  public DurationStruct(
      long seconds,
      int nanos) {
    this();
    this.seconds = seconds;
    setSecondsIsSet(true);
    this.nanos = nanos;
    setNanosIsSet(true);
  }

  public static class Builder {
    private long seconds;
    private int nanos;

    BitSet __optional_isset = new BitSet(2);

    public Builder() {
    }

    public Builder setSeconds(final long seconds) {
      this.seconds = seconds;
      __optional_isset.set(__SECONDS_ISSET_ID, true);
      return this;
    }

    public Builder setNanos(final int nanos) {
      this.nanos = nanos;
      __optional_isset.set(__NANOS_ISSET_ID, true);
      return this;
    }

    public DurationStruct build() {
      DurationStruct result = new DurationStruct();
      if (__optional_isset.get(__SECONDS_ISSET_ID)) {
        result.setSeconds(this.seconds);
      }
      if (__optional_isset.get(__NANOS_ISSET_ID)) {
        result.setNanos(this.nanos);
      }
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DurationStruct(DurationStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.seconds = TBaseHelper.deepCopy(other.seconds);
    this.nanos = TBaseHelper.deepCopy(other.nanos);
  }

  public DurationStruct deepCopy() {
    return new DurationStruct(this);
  }

  /**
   * The count of seconds.
   */
  public long getSeconds() {
    return this.seconds;
  }

  /**
   * The count of seconds.
   */
  public DurationStruct setSeconds(long seconds) {
    this.seconds = seconds;
    setSecondsIsSet(true);
    return this;
  }

  public void unsetSeconds() {
    __isset_bit_vector.clear(__SECONDS_ISSET_ID);
  }

  // Returns true if field seconds is set (has been assigned a value) and false otherwise
  public boolean isSetSeconds() {
    return __isset_bit_vector.get(__SECONDS_ISSET_ID);
  }

  public void setSecondsIsSet(boolean __value) {
    __isset_bit_vector.set(__SECONDS_ISSET_ID, __value);
  }

  /**
   * The count of nanoseconds.
   */
  public int getNanos() {
    return this.nanos;
  }

  /**
   * The count of nanoseconds.
   */
  public DurationStruct setNanos(int nanos) {
    this.nanos = nanos;
    setNanosIsSet(true);
    return this;
  }

  public void unsetNanos() {
    __isset_bit_vector.clear(__NANOS_ISSET_ID);
  }

  // Returns true if field nanos is set (has been assigned a value) and false otherwise
  public boolean isSetNanos() {
    return __isset_bit_vector.get(__NANOS_ISSET_ID);
  }

  public void setNanosIsSet(boolean __value) {
    __isset_bit_vector.set(__NANOS_ISSET_ID, __value);
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case SECONDS:
      if (__value == null) {
        unsetSeconds();
      } else {
        setSeconds((Long)__value);
      }
      break;

    case NANOS:
      if (__value == null) {
        unsetNanos();
      } else {
        setNanos((Integer)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SECONDS:
      return new Long(getSeconds());

    case NANOS:
      return new Integer(getNanos());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof DurationStruct))
      return false;
    DurationStruct that = (DurationStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.seconds, that.seconds)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.nanos, that.nanos)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {seconds, nanos});
  }

  @Override
  public int compareTo(DurationStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSeconds()).compareTo(other.isSetSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(seconds, other.seconds);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNanos()).compareTo(other.isSetNanos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(nanos, other.nanos);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case SECONDS:
          if (__field.type == TType.I64) {
            this.seconds = iprot.readI64();
            setSecondsIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NANOS:
          if (__field.type == TType.I32) {
            this.nanos = iprot.readI32();
            setNanosIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SECONDS_FIELD_DESC);
    oprot.writeI64(this.seconds);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NANOS_FIELD_DESC);
    oprot.writeI32(this.nanos);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("DurationStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("seconds");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getSeconds(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("nanos");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getNanos(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

