/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

/**
 * A fixed-length span of time, represented as a signed count of seconds and
 * nanoseconds (nanos).
 * 
 * Considered 'normal', when `nanos` is in the range 0 to 999'999'999
 * inclusive, or `seconds` is 0 and `nanos` is in the range -999'999'999 to
 * 999'999'999 inclusive.
 */
@SuppressWarnings({ "unused", "serial" })
public class DurationStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DurationStruct");
  private static final TField SECONDS_FIELD_DESC = new TField("seconds", TType.I64, (short)1);
  private static final TField NANOS_FIELD_DESC = new TField("nanos", TType.I32, (short)2);

  /**
   * The count of seconds.
   */
  public final Long seconds;
  /**
   * The count of nanoseconds.
   */
  public final Integer nanos;
  public static final int SECONDS = 1;
  public static final int NANOS = 2;

  public DurationStruct(
      Long seconds,
      Integer nanos) {
    this.seconds = seconds;
    this.nanos = nanos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DurationStruct(DurationStruct other) {
    if (other.isSetSeconds()) {
      this.seconds = TBaseHelper.deepCopy(other.seconds);
    } else {
      this.seconds = null;
    }
    if (other.isSetNanos()) {
      this.nanos = TBaseHelper.deepCopy(other.nanos);
    } else {
      this.nanos = null;
    }
  }

  public DurationStruct deepCopy() {
    return new DurationStruct(this);
  }

  /**
   * The count of seconds.
   */
  public Long getSeconds() {
    return this.seconds;
  }

  // Returns true if field seconds is set (has been assigned a value) and false otherwise
  public boolean isSetSeconds() {
    return this.seconds != null;
  }

  /**
   * The count of nanoseconds.
   */
  public Integer getNanos() {
    return this.nanos;
  }

  // Returns true if field nanos is set (has been assigned a value) and false otherwise
  public boolean isSetNanos() {
    return this.nanos != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof DurationStruct))
      return false;
    DurationStruct that = (DurationStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetSeconds(), that.isSetSeconds(), this.seconds, that.seconds)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetNanos(), that.isSetNanos(), this.nanos, that.nanos)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {seconds, nanos});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static DurationStruct deserialize(TProtocol iprot) throws TException {
    Long tmp_seconds = null;
    Integer tmp_nanos = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case SECONDS:
          if (__field.type == TType.I64) {
            tmp_seconds = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NANOS:
          if (__field.type == TType.I32) {
            tmp_nanos = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    DurationStruct _that;
    _that = new DurationStruct(
      tmp_seconds
      ,tmp_nanos
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.seconds != null) {
      oprot.writeFieldBegin(SECONDS_FIELD_DESC);
      oprot.writeI64(this.seconds);
      oprot.writeFieldEnd();
    }
    if (this.nanos != null) {
      oprot.writeFieldBegin(NANOS_FIELD_DESC);
      oprot.writeI32(this.nanos);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

