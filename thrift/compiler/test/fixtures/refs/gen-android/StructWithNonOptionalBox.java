/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class StructWithNonOptionalBox implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("StructWithNonOptionalBox");
  private static final TField A_FIELD_DESC = new TField("a", TType.STRING, (short)1);
  private static final TField B_FIELD_DESC = new TField("b", TType.LIST, (short)2);
  private static final TField C_FIELD_DESC = new TField("c", TType.STRUCT, (short)3);

  public final String a;
  public final List<Long> b;
  public final StructWithRef c;
  public static final int A = 1;
  public static final int B = 2;
  public static final int C = 3;

  public StructWithNonOptionalBox(
      String a,
      List<Long> b,
      StructWithRef c) {
    this.a = a;
    this.b = b;
    this.c = c;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StructWithNonOptionalBox(StructWithNonOptionalBox other) {
    if (other.isSetA()) {
      this.a = TBaseHelper.deepCopy(other.a);
    } else {
      this.a = null;
    }
    if (other.isSetB()) {
      this.b = TBaseHelper.deepCopy(other.b);
    } else {
      this.b = null;
    }
    if (other.isSetC()) {
      this.c = TBaseHelper.deepCopy(other.c);
    } else {
      this.c = null;
    }
  }

  public StructWithNonOptionalBox deepCopy() {
    return new StructWithNonOptionalBox(this);
  }

  public String getA() {
    return this.a;
  }

  // Returns true if field a is set (has been assigned a value) and false otherwise
  public boolean isSetA() {
    return this.a != null;
  }

  public List<Long> getB() {
    return this.b;
  }

  // Returns true if field b is set (has been assigned a value) and false otherwise
  public boolean isSetB() {
    return this.b != null;
  }

  public StructWithRef getC() {
    return this.c;
  }

  // Returns true if field c is set (has been assigned a value) and false otherwise
  public boolean isSetC() {
    return this.c != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof StructWithNonOptionalBox))
      return false;
    StructWithNonOptionalBox that = (StructWithNonOptionalBox)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetA(), that.isSetA(), this.a, that.a)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetB(), that.isSetB(), this.b, that.b)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetC(), that.isSetC(), this.c, that.c)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {a, b, c});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static StructWithNonOptionalBox deserialize(TProtocol iprot) throws TException {
    String tmp_a = null;
    List<Long> tmp_b = null;
    StructWithRef tmp_c = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case A:
          if (__field.type == TType.STRING) {
            tmp_a = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case B:
          if (__field.type == TType.LIST) {
            {
              TList _list45 = iprot.readListBegin();
              tmp_b = new ArrayList<Long>(Math.max(0, _list45.size));
              for (int _i46 = 0; 
                   (_list45.size < 0) ? iprot.peekList() : (_i46 < _list45.size); 
                   ++_i46)
              {
                Long _elem47;
                _elem47 = iprot.readI64();
                tmp_b.add(_elem47);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case C:
          if (__field.type == TType.STRUCT) {
            tmp_c = StructWithRef.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    StructWithNonOptionalBox _that;
    _that = new StructWithNonOptionalBox(
      tmp_a
      ,tmp_b
      ,tmp_c
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.a != null) {
      oprot.writeFieldBegin(A_FIELD_DESC);
      oprot.writeString(this.a);
      oprot.writeFieldEnd();
    }
    if (this.b != null) {
      oprot.writeFieldBegin(B_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.b.size()));
        for (Long _iter48 : this.b)        {
          oprot.writeI64(_iter48);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.c != null) {
      oprot.writeFieldBegin(C_FIELD_DESC);
      this.c.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

